import React, { useRef, useEffect, useState } from 'react';
import { BrowserRouter as Router, Routes, Route, useNavigate } from 'react-router-dom';
import './App.css';

const WEDDING_DATE = new Date('2025-07-27T16:30:00');
const PHRASES = [
  '–µ—â—ë –µ—Å—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–¥—É–º–∞—Ç—å, –≤ —á—ë–º —Ç—ã –ø—Ä–∏–¥—ë—à—å',
  '–Ω–µ –∑–∞–±—É–¥—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ. –æ–Ω–∞ —É–∂–µ –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç',
  '—É—Å–ø–µ–µ—à—å: –≤—ã—Å–ø–∞—Ç—å—Å—è, –∫—É–ø–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∏ –ø–µ—Ä–µ–¥—É–º–∞—Ç—å. –Ω–æ –Ω–µ –Ω–∞–¥–æ.',
  '–≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –∑–∞–±—ã—Ç—å —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
  '–ø–ª–∞—Ç—å–µ –≥–ª–∞–¥–∏—Ç—Å—è, —Ç—É—Ñ–ª–∏ –Ω–∞—Ç–æ—á–µ–Ω—ã, –≤—Å—ë –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...'
];
const PRO_MODE = [
  '—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º: –≥–æ—Å—Ç—å-–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
  '—Ç–µ–±–µ –º–æ–∂–Ω–æ –¥–≤–∞–∂–¥—ã –≤–∑—è—Ç—å —Å–∞–ª–∞—Ç',
  '—Ç—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–æ —Ö–ª–æ–ø–∞—Ç—å –ø–µ—Ä–≤—ã–º –ø–æ—Å–ª–µ —Ç–æ—Å—Ç–∞',
  '—Ç–µ–±–µ –º–æ–∂–Ω–æ –∑–µ–≤–∞—Ç—å, –Ω–æ —Å —É–≤–∞–∂–µ–Ω–∏–µ–º'
];
const LIFEHACKS = [
  '–≤—Ö–æ–¥ ‚Äî —Ç–æ–ª—å–∫–æ –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏',
  '–¥—Ä–µ—Å—Å-–∫–æ–¥: "–≤—Å—ë, –≤ —á—ë–º —Ç—ã –≥–æ—Ç–æ–≤ –ø–∏—Ç—å —à–∞–º–ø–∞–Ω—Å–∫–æ–µ —Å—Ç–æ—è"',
  '–ø–æ–¥–∞—Ä–∫–∏: –º–æ–∂–Ω–æ, –Ω–µ –º–æ–∂–Ω–æ ‚Äî —É—Ç–æ—á–Ω–∏ –ø–æ–∑–∂–µ',
  '–æ–ø–æ–∑–¥–∞–Ω–∏—è: –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è, –Ω–æ –±–µ–∑ –ø–æ–Ω—Ç–æ–≤',
  '–ø–æ—Ü–µ–ª—É–∏: –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã'
];

// --- Telegram WebApp SDK ---
declare global {
  interface Window {
    Telegram?: any;
  }
}
const tg = typeof window !== 'undefined' && window.Telegram ? window.Telegram.WebApp : undefined;

function useTelegramInit() {
  useEffect(() => {
    if (tg) {
      tg.ready();
      tg.expand();
    }
  }, []);
}

function useTelegramTheme() {
  const [theme, setTheme] = useState({
    bg_color: '#000',
    text_color: '#fff',
    button_color: '#1976d2',
    button_text_color: '#fff',
  });
  useEffect(() => {
    if (tg && tg.themeParams) {
      setTheme({
        bg_color: tg.themeParams.bg_color || '#000',
        text_color: tg.themeParams.text_color || '#fff',
        button_color: tg.themeParams.button_color || '#1976d2',
        button_text_color: tg.themeParams.button_text_color || '#fff',
      });
    }
  }, []);
  return theme;
}

function downloadICS() {
  const ics = `BEGIN:VCALENDAR\nVERSION:2.0\nBEGIN:VEVENT\nSUMMARY:–°–≤–∞–¥—å–±–∞ –¢–∏–º—É—Ä–∫–∏ –∏ –í–∏–∫—É—à–∏\nDTSTART;TZID=Europe/Moscow:20250727T163000\nDTEND;TZID=Europe/Moscow:20250727T200000\nLOCATION:–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\nDESCRIPTION:–ì–ª–∞–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≥–æ–¥–∞!\nEND:VEVENT\nEND:VCALENDAR`;
  const blob = new Blob([ics.replace(/\n/g, '\r\n')], { type: 'text/calendar' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = 'wedding.ics';
  a.click();
  setTimeout(() => URL.revokeObjectURL(url), 1000);
}

function MainScreen() {
  useTelegramInit();
  const theme = useTelegramTheme();
  const navigate = useNavigate();
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const [user, setUser] = useState<{first_name?: string, username?: string} | null>(null);
  useEffect(() => {
    if (tg && tg.initDataUnsafe && tg.initDataUnsafe.user) {
      setUser(tg.initDataUnsafe.user);
    }
  }, []);
  return (
    <div className="App" style={{background: theme.bg_color, color: theme.text_color, minHeight:'100vh'}}>
      <div className="header">
        <div className="title">üíç —Ç–∏–º—É—Ä–∫–∞ + –≤–∏–∫—É—à–∞</div>
        <div className="subtitle">
          {user ? `–ø—Ä–∏–≤–µ—Ç, ${user.first_name || user.username || '–≥–æ—Å—Ç—å'}! ` : ''}
          –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –ø–æ–ª—É—á–∏ –≤–µ—Å–µ–ª—å–µ. —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –Ω–∞—á–∞–ª—Å—è
        </div>
      </div>
      <div className="main-buttons">
        <button className="main-btn" style={{background: theme.button_color, color: theme.button_text_color}} onClick={() => navigate('/info')}>üìÖ —á—Ç–æ, –≥–¥–µ, –∫–æ–≥–¥–∞</button>
        <button className="main-btn" style={{background: theme.button_color, color: theme.button_text_color}} onClick={() => navigate('/quiz')}>üß† —ç–∫–∑–∞–º–µ–Ω</button>
        <button className="main-btn" style={{background: theme.button_color, color: theme.button_text_color}} onClick={() => navigate('/alcometer')}>üçπ –∞–ª–∫–æ–º–µ—Ç—Ä</button>
        <button className="main-btn" style={{background: theme.button_color, color: theme.button_text_color}} onClick={() => navigate('/toast')}>üé§ –≥–æ–≤–æ—Ä–∏ –∫—Ä–∞—Å–∏–≤–æ</button>
      </div>
    </div>
  );
}

function InfoScreen() {
  const [phraseIdx, setPhraseIdx] = React.useState(() => Math.floor(Math.random() * PHRASES.length));
  const [lifehacks, setLifehacks] = React.useState(false);
  const [proMode, setProMode] = React.useState(false);
  const [proMsg, setProMsg] = React.useState('');
  const [secTap, setSecTap] = React.useState(0);
  const [cursor, setCursor] = React.useState(true);
  const secTapTimeout = useRef<NodeJS.Timeout | null>(null);
  React.useEffect(() => {
    const blink = setInterval(() => setCursor(c => !c), 500);
    return () => clearInterval(blink);
  }, []);
  React.useEffect(() => {
    if (secTap === 5) {
      setProMode(true);
      setProMsg(PRO_MODE[Math.floor(Math.random() * PRO_MODE.length)]);
      const timeout = setTimeout(() => setProMode(false), 3500);
      setSecTap(0);
      return () => clearTimeout(timeout);
    }
  }, [secTap]);
  // –¢–∞–π–º–µ—Ä
  const [timeLeft, setTimeLeft] = React.useState(WEDDING_DATE.getTime() - Date.now());
  React.useEffect(() => {
    const interval = setInterval(() => {
      setTimeLeft(WEDDING_DATE.getTime() - Date.now());
    }, 1000);
    return () => clearInterval(interval);
  }, []);
  if (timeLeft <= 0) return <div className="App"><div className="header"><div className="title">—Ç—ã –∏–¥—ë—à—å{cursor ? '_' : ''}</div></div><div className="event-card">–°–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ –Ω–∞—á–∞–ª—Å—è!</div></div>;
  const days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeLeft / (1000 * 60 * 60)) % 24);
  const minutes = Math.floor((timeLeft / (1000 * 60)) % 60);
  const seconds = Math.floor((timeLeft / 1000) % 60);
  return (
    <div className="App">
      <div className="header">
        <div className="title">—Ç—ã –∏–¥—ë—à—å{cursor ? '_' : ''}</div>
      </div>
      <div className="event-card">
        <div className="event-row"><b>–î–∞—Ç–∞:</b> 27 –∏—é–ª—è 2025, 16:30</div>
        <div className="event-row"><b>–ê–¥—Ä–µ—Å:</b> –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1</div>
        <a className="event-map" href="https://yandex.ru/maps/?text=–ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1" target="_blank" rel="noopener noreferrer">üîó –û—Ç–∫—Ä—ã—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>
      </div>
      <div className="timer-label-fat">–¥–æ –Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å:</div>
      <div className="timer-fat">
        <span className="timer-fat-cell">{days} –¥</span>
        <span className="timer-fat-cell">{hours} —á</span>
        <span className="timer-fat-cell">{minutes} –º</span>
        <span className="timer-fat-cell" onClick={() => setSecTap(t => t+1)} style={{cursor:'pointer'}}>{seconds} —Å</span>
      </div>
      <div className="timer-phrase" onClick={() => setPhraseIdx((i) => (i+1)%PHRASES.length)}>
        {proMode ? <b style={{color:'#00e5e5'}}>{proMsg}</b> : PHRASES[phraseIdx]}
      </div>
      <button className="main-btn" style={{maxWidth:340, margin:'0 auto 16px auto'}} onClick={() => setLifehacks(l => !l)}>üß† —á—Ç–æ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å?</button>
      {lifehacks && (
        <div className="event-lifehacks">
          {LIFEHACKS.map((l, i) => <div key={i} className="event-lifehack-row">{l}</div>)}
        </div>
      )}
      <div className="event-bottom-phrase">–µ—Å–ª–∏ —Ç—ã –¥–æ—á–∏—Ç–∞–ª –¥–æ —Å—é–¥–∞ ‚Äî —Ç—ã —É–∂–µ –º–æ—Ä–∞–ª—å–Ω–æ –Ω–∞ –º–µ—Å—Ç–µ.</div>
      <button className="info-bottom-btn" onClick={() => window.history.back()}>‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  );
}

function QuizScreen() {
  const questions = [
    {
      q: '–∫–∞–∫ –∑–æ–≤—É—Ç –∂–µ–Ω–∏—Ö–∞?',
      options: [
        '–¢–∏–º—É—Ä',
        '–¢–µ–º—É—Ä',
        '–ê—Ä–Ω–æ–ª—å–¥',
        '—è –∑–∞–±—ã–ª(–∞), –Ω–æ –æ–Ω –∫—Ä–∞—Å–∞–≤—á–∏–∫',
      ],
      correct: 0,
      memes: [
        'üëç –û–¥–æ–±—Ä–µ–Ω–æ!',
        'üòº –ü–æ—á—Ç–∏!',
        'üï∑Ô∏è –°–ø–∞–π–¥–µ—Ä–º–µ–Ω –Ω–µ –ø—Ä–∏–µ–¥–µ—Ç',
        'üòé –ì–ª–∞–≤–Ω–æ–µ ‚Äî —á–µ—Å—Ç–Ω–æ—Å—Ç—å!',
      ],
    },
    {
      q: '—á—Ç–æ —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç –±–µ–ª–æ–µ –ø–ª–∞—Ç—å–µ –Ω–µ–≤–µ—Å—Ç—ã?',
      options: [
        '—á–∏—Å—Ç–æ—Ç—É –∏ –Ω–µ–∂–Ω–æ—Å—Ç—å',
        '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—ã–≥—É–ª–∏–≤–∞—Ç—å –Ω–∞—Ä—è–¥ –±–µ–∑ –∫–∞–ø–µ–ª—å –∫–µ—Ç—á—É–ø–∞',
        '–±–µ–ª—É—é –±—É–º–∞–≥—É –¥–ª—è whitepaper',
        '—ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ä–æ—Ñ–ª ‚Äî –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –∫–æ—Å—Ç—é–º –ß–µ–ª–æ–≤–µ–∫–∞-–ü–∞—É–∫–∞',
      ],
      correct: 0,
      memes: [
        'ü§ç –ö–ª–∞—Å—Å–∏–∫–∞!',
        'üçÖ –£–≤–∞–∂–µ–Ω–∏–µ –∫ –Ω–∞–≤—ã–∫–∞–º!',
        'üìÑ –ö—Ä–∏–ø—Ç–æ-–æ—Ç–≤–µ—Ç!',
        'üï∏Ô∏è Marvel style!',
      ],
    },
  ];
  const [step, setStep] = React.useState(0);
  const [selected, setSelected] = React.useState<number|null>(null);
  const [showMeme, setShowMeme] = React.useState(false);
  const handleSelect = (idx: number) => {
    setSelected(idx);
    setShowMeme(true);
    setTimeout(() => {
      setShowMeme(false);
      setSelected(null);
      setStep(s => (s + 1 < questions.length ? s + 1 : 0));
    }, 1200);
  };
  const q = questions[step];
  return (
    <div className="App">
      <div className="header">
        <div className="title">üß† —ç–∫–∑–∞–º–µ–Ω</div>
        <div className="subtitle">–º–∏–Ω–∏-–∫–≤–∏–∑ –¥–ª—è –≥–æ—Å—Ç–µ–π</div>
      </div>
      <div className="event-card" style={{textAlign:'center'}}>
        <div style={{fontSize:'1.15rem', marginBottom:16}}>{q.q}</div>
        {q.options.map((opt, i) => (
          <button
            key={i}
            className="main-btn"
            style={{marginBottom:10, background: selected===i ? '#42a5f5' : undefined}}
            onClick={() => handleSelect(i)}
            disabled={selected!==null}
          >
            {String.fromCharCode(97+i)}) {opt}
          </button>
        ))}
        {showMeme && selected!==null && (
          <div style={{marginTop:18, fontSize:'1.3rem'}}>{q.memes[selected]}</div>
        )}
      </div>
      <button className="info-bottom-btn" onClick={() => window.history.back()}>‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  );
}

function AlcometerScreen() {
  const stages = [
    { label: '–¢—Ä–µ–∑–≤—ã–π', meme: ['üßä –¢—ã –≤ –∑–æ–Ω–µ —Ç–∞–º–∞–¥—ã', 'üßä –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –Ω—é—Ö–∞–µ—à—å –±–æ–∫–∞–ª', 'üßä –°–æ—Ö—Ä–∞–Ω—è–µ—à—å —è—Å–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏'], emoji: 'üçæ', taps: 4, window: 2000 },
    { label: '–†–∞–∑–æ–≥—Ä–µ–≤', meme: ['üç∏ –£–∂–µ –≤–µ—Å–µ–ª–µ–µ!', 'üç∏ –ü–µ—Ä–≤—ã–π —Ç–æ—Å—Ç –ø–æ—à—ë–ª!', 'üç∏ –ì—Ä–µ–µ—à—å—Å—è, –∫–∞–∫ –Ω–∞–¥–æ'], emoji: 'üç∏', taps: 6, window: 1800 },
    { label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', meme: ['üçπ –¢—ã —É–∂–µ –≤ –∑–æ–Ω–µ —Ç–∞–Ω—Ü–ø–æ–ª–∞', 'üçπ –ü–æ—Ä–∞ –Ω–∞ –±–∞—Ä!', 'üçπ –°–µ–ª—Ñ–∏ —Å –∂–µ–Ω–∏—Ö–æ–º ‚Äî done'], emoji: 'üçπ', taps: 8, window: 1600 },
    { label: '–ù–∞ –≤–∑–ª—ë—Ç–µ', meme: ['ü•≥ –ï—â—ë –æ–¥–∏–Ω —à–æ—Ç ‚Äî –∏ —Ç—ã –Ω–∞ —Ñ–æ—Ç–æ —Å —Ç—ë—â–µ–π', 'ü•≥ –¢—ã —É–∂–µ –≤ stories —É –≤—Å–µ—Ö', 'ü•≥ –¢–∞–Ω—Ü—É–µ—à—å, –∫–∞–∫ –±—É–¥—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –≤–∏–¥–∏—Ç'], emoji: 'ü•É', taps: 10, window: 1400 },
    { label: '–í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ', meme: ['üé§ –¢—ã –≥–æ—Ç–æ–≤ –∫ —Ç–æ—Å—Ç—É!', 'üé§ –ü–æ—Ä–∞ —Å–∫–∞–∑–∞—Ç—å –ø–∞—Ä—É —Å–ª–æ–≤', 'üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —É–∂–µ —É —Ç–µ–±—è'], emoji: 'ü•Ç', taps: 12, window: 1200 },
    { label: '–§–∏–ª–æ—Å–æ—Ñ', meme: ['ü¶â –¢—ã —Ä–∞—Å—Å—É–∂–¥–∞–µ—à—å –æ —Å–º—ã—Å–ª–µ –∂–∏–∑–Ω–∏', 'ü¶â –ü–æ—Ä–∞ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç', 'ü¶â –ì–ª—É–±–æ–∫–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å –±–∞—Ä–º–µ–Ω–æ–º'], emoji: 'üç∑', taps: 14, window: 1000 },
    { label: 'Wasted', meme: ['üíÄ –ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —á–∏—Ç–∞–µ—à—å ‚Äî —Ç—ã —É–∂–µ –ø—å—è–Ω', 'üíÄ –¢—ã –Ω–∞ —Ñ–æ—Ç–æ —Å —Ç—ë—â–µ–π –≤ –æ–±–Ω–∏–º–∫—É', 'üíÄ –ü–æ—Ä–∞ –¥–æ–º–æ–π... –∏–ª–∏ –Ω–∞ –±–∏—Å!'], emoji: 'ü•¥', taps: 10, window: 1000 },
  ];
  const [level, setLevel] = React.useState(0);
  const [tapCount, setTapCount] = React.useState(0);
  const [tapStart, setTapStart] = React.useState<number|null>(null);
  const [shaking, setShaking] = React.useState(false);
  const [memeIdx, setMemeIdx] = React.useState(() => Math.floor(Math.random()*3));
  const [egg, setEgg] = React.useState(false);
  React.useEffect(() => { setMemeIdx(Math.floor(Math.random()*3)); }, [level]);
  React.useEffect(() => {
    if (tapCount === stages[level].taps) {
      setTimeout(() => {
        setLevel(l => (l < stages.length - 1 ? l + 1 : l));
        setTapCount(0);
        setTapStart(null);
      }, 200);
    }
  }, [tapCount, level]);
  React.useEffect(() => {
    if (tapStart !== null) {
      const timer = setTimeout(() => {
        setTapCount(0);
        setTapStart(null);
      }, stages[level].window);
      return () => clearTimeout(timer);
    }
  }, [tapStart, tapCount, level]);
  // Easter egg: –µ—Å–ª–∏ –Ω–∞ Wasted –Ω–∞—Ç–∞–ø–∞—Ç—å –µ—â—ë 10 —Ä–∞–∑ –∑–∞ 1 —Å–µ–∫ ‚Äî –ø–∞—Å—Ö–∞–ª–∫–∞
  React.useEffect(() => {
    if (level === stages.length-1 && tapCount === 10) {
      setEgg(true);
      setTimeout(() => setEgg(false), 3500);
      setTapCount(0);
      setTapStart(null);
    }
  }, [tapCount, level]);
  const handleTap = () => {
    setShaking(true);
    setTimeout(() => setShaking(false), 120);
    if (tapStart === null) {
      setTapStart(Date.now());
      setTapCount(1);
    } else {
      setTapCount(c => Math.min(c+1, stages[level].taps));
    }
  };
  const handleReset = () => { setLevel(0); setTapCount(0); setTapStart(null); setEgg(false); };
  const progress = tapCount / stages[level].taps;
  return (
    <div className="App">
      <div className="header">
        <div className="title">üçπ –∞–ª–∫–æ–º–µ—Ç—Ä</div>
        <div className="subtitle">—Ç–∞–ø–∞–π –ø–æ –±—É—Ç—ã–ª–∫–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å</div>
      </div>
      <div className="event-card" style={{textAlign:'center', minHeight: 320, display:'flex', flexDirection:'column', justifyContent:'center', alignItems:'center'}}>
        <div style={{display:'flex', alignItems:'center', justifyContent:'center', gap:8, marginBottom:18}}>
          {stages.map((s, i) => (
            <div key={i} style={{
              width: 32, height: 32, borderRadius: '50%',
              background: i <= level ? (i===level ? '#42a5f5' : '#1E88E5') : '#222',
              border: i === level ? '3px solid #fff' : '2px solid #444',
              display:'flex', alignItems:'center', justifyContent:'center',
              color:'#fff', fontWeight:700, fontSize: i===stages.length-1? '1.1rem':'1rem',
              transition:'background 0.2s, border 0.2s',
              animation: i===level && shaking ? 'alco-pulse 0.2s infinite alternate' : undefined,
              boxShadow: i===level && level===stages.length-1 ? '0 0 16px 4px #f00' : undefined,
              filter: i===level && level===stages.length-1 ? 'brightness(1.5)' : undefined,
            }}>{i+1}</div>
          ))}
        </div>
        <div style={{margin:'0 0 18px 0', width:'100%', maxWidth:220, display:'flex', flexDirection:'column', alignItems:'center'}}>
          <div
            onClick={level===stages.length-1?undefined:handleTap}
            style={{
              fontSize: 48,
              cursor: level===stages.length-1?'not-allowed':'pointer',
              userSelect:'none',
              display:'inline-block',
              animation: shaking ? 'shake 0.15s infinite alternate' : undefined,
              filter: level===stages.length-1 ? 'grayscale(0.7)' : undefined,
              marginBottom: 8,
              transition:'filter 0.2s',
            }}
            aria-label="–ë—É—Ç—ã–ª–∫–∞"
          >{stages[level].emoji}</div>
          {level!==stages.length-1 && (
            <div style={{height:10, background:'#222', borderRadius:6, width:'100%', maxWidth:180, overflow:'hidden', marginBottom:8}}>
              <div style={{height:10, background:'#1E88E5', width:`${progress*100}%`, borderRadius:6, transition:'width 0.2s'}}></div>
            </div>
          )}
          {level!==stages.length-1 && (
            <div style={{fontSize:12, color:'#888', marginBottom:8}}>
              —Ç–∞–ø–Ω–∏ {stages[level].taps} —Ä–∞–∑ –∑–∞ {stages[level].window/1000} —Å–µ–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ
            </div>
          )}
        </div>
        <div style={{fontSize:'1.1rem', margin:'12px 0 18px 0', minHeight:32, transition:'color 0.2s', color: level===stages.length-1 ? '#f00' : '#fff'}}>
          {egg ? <b>ü•ö –¢—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Ä–µ–∂–∏–º: –±–∞—Ä–º–µ–Ω-–ø—Ä–æ—Ñ–∏!<br/>–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –º–æ–∂–Ω–æ –Ω–∞–ª–∏–≤–∞—Ç—å –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏!</b> : stages[level].meme[memeIdx]}
        </div>
        <button className="event-ics" onClick={handleReset} style={{marginBottom:0, background:'#222', color:'#fff', border:'none'}}>–æ–±–Ω—É–ª–∏—Ç—å</button>
      </div>
      <button className="info-bottom-btn" onClick={() => window.history.back()}>‚Üê –ù–∞–∑–∞–¥</button>
      <style>{`
        @keyframes alco-pulse {
          0% { box-shadow: 0 0 0 0 #1E88E5; }
          100% { box-shadow: 0 0 16px 4px #1E88E5; }
        }
        @keyframes shake {
          0% { transform: translateX(0); }
          25% { transform: translateX(-3px); }
          50% { transform: translateX(3px); }
          75% { transform: translateX(-3px); }
          100% { transform: translateX(0); }
        }
      `}</style>
    </div>
  );
}

function ToastScreen() {
  const TOASTS = [
    '–∑–∞ —Ç–æ, —á—Ç–æ–±—ã –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
    '–∑–∞ –ª—é–±–æ–≤—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞',
    '–ø—É—Å—Ç—å —á–µ–±—É—Ä–µ–∫ –Ω–µ —É–ø–∞–¥—ë—Ç –º–∞—Å–ª–æ–º –Ω–∞ –±–µ–ª–æ–µ',
    '–∑–∞ —Å–º–µ—Ö, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–º, –≥–¥–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª',
    '—á—Ç–æ–±—ã –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—à–µ–ª –≥–æ–ª–æ–¥–Ω—ã–º –∏ –≥—Ä—É—Å—Ç–Ω—ã–º',
    '–∑–∞ –Ω–æ–≤—ã–µ —Å–≤–∏—Ç—à–æ—Ç—ã –∏ —Å—Ç–∞—Ä—ã–µ —à—É—Ç–∫–∏',
    '–∑–∞ —É—Ç—Ä–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å—Ç—ã–¥–Ω–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å',
    '–ø—É—Å—Ç—å –º–æ—Ä—Å –ª—å—ë—Ç—Å—è —Ä–µ–∫–æ–π –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∫–æ–Ω—á–∞–µ—Ç—Å—è vpn',
    '–∑–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç —Å–∏–¥–µ—Ç—å –Ω–∞ –ø–æ–ª—É –∏ –±—ã—Ç—å —Å—á–∞—Å—Ç–ª–∏–≤—ã–º–∏',
    '—á—Ç–æ–±—ã –±–∞–±—É—à–∫–∞ —Å–∫–∞–∑–∞–ª–∞: –Ω—É –ª–∞–¥–Ω–æ, –∂–∏–≤–∏—Ç–µ',
    '–∑–∞ —Ç–∞–Ω–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–Ω—ë—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ',
    '–ø—É—Å—Ç—å –≤–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –±—É–¥—É—Ç –¥–æ–ª—å—à–µ –∑–∞—Ä—è–¥–∫–∏ –Ω–∞ –∞–π—Ñ–æ–Ω–µ',
    '–∑–∞ –º–∏—Ä, –≥–¥–µ –Ω–∏–∫—Ç–æ –Ω–µ –¥–µ–ª–∏—Ç –ø–ª–µ–¥',
    '–ø—É—Å—Ç—å —Ñ–æ—Ä–µ–ª—å –±—É–¥–µ—Ç —Å–≤–µ–∂–µ–π, –∞ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –Ω–µ—Ç',
    '–∑–∞ —Ç–∏—à–∏–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–ª—ã—à–Ω–æ: –≤—Å—ë –æ–∫',
    '–ø—É—Å—Ç—å —Å–ø–∏—Å–∫–∏ –í–∏–∫–∏ —Å–ø–∞—Å–∞—é—Ç –º–∏—Ä',
    '–∑–∞ –¢–∏–º—É—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –Ω–∞–π–¥—ë—Ç enter',
    '–ø—É—Å—Ç—å –∫–æ—Ç—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–æ–≤—Ä–µ–º—è, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç',
    '–∑–∞ —Å–º–µ–ª–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ –≤–µ—â–∏ –Ω–æ—á—å—é',
    '–ø—É—Å—Ç—å –ª—é–±–æ–≤—å –Ω–µ –∑–Ω–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω–æ–≤',
    '–∑–∞ –æ–∫–Ω–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥–Ω–æ —Ç–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–µ–µ',
    '–ø—É—Å—Ç—å –¥–æ–∂–¥—å –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–Ω—Ç—É—Ä–∞–∂–∞',
    '–∑–∞ –∫–æ—Ñ–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ª–∏–≤–∞—é—Ç –º–æ–ª—á–∞, –Ω–æ —Å –¥–æ–±—Ä–æ–º',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–±—É–¥–µ—Ç —Ç–∞–ø–æ—á–∫–∏',
    '–∑–∞ —Ç–µ—Ö, –∫—Ç–æ —Ö–ª–æ–ø–∞–µ—Ç –ø–µ—Ä–≤—ã–º',
    '–ø—É—Å—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ –±—É–¥—É—Ç –±–µ–∑ –∫—Ä–∏–Ω–∂–∞, –Ω–æ —Å –ø—Ä–∞–≤–¥–æ–π',
    '–∑–∞ —Å–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è',
    '–ø—É—Å—Ç—å —Ç–æ—Ä—Ç—ã –±—É–¥—É—Ç —Å —Å—é—Ä–ø—Ä–∏–∑–∞–º–∏, –Ω–æ –±–µ–∑ –∏–∑—é–º–∞',
    '–∑–∞ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –±–æ–∏—Ç—Å—è –≤—ã–∫–∏–Ω—É—Ç—å –º—É—Å–æ—Ä –Ω–æ—á—å—é',
    '–ø—É—Å—Ç—å –ø–ª–µ–¥ —É–∫—Ä–æ–µ—Ç –≤—Å—ë, —á—Ç–æ –Ω–∞–¥–æ —É–∫—Ä—ã—Ç—å',
    '–∑–∞ —Ç—É –º—É–∑—ã–∫—É, –ø–æ–¥ –∫–æ—Ç–æ—Ä—É—é –Ω–µ —Å—Ç—ã–¥–Ω–æ –ø–ª–∞–∫–∞—Ç—å',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Ç–µ—Ä—è–µ—Ç –Ω–æ—Å–∫–∏',
    '–∑–∞ —Å–º–µ—Ö –ø–æ–¥ –æ–¥–µ—è–ª–æ–º',
    '–ø—É—Å—Ç—å –∫–∞—Ä—Ç–æ—à–∫–∞ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ä—è—á–µ–π',
    '–∑–∞ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç –ø—Ä–æ—Å—Ç–æ —Å–∏–¥–µ—Ç—å —Ä—è–¥–æ–º',
    '–ø—É—Å—Ç—å –Ω–∏–∫–∞–∫–æ–π –±–∞–≥ –Ω–µ —Å–ª–æ–º–∞–µ—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –ª—é–±–≤–∏',
    '–∑–∞ –æ–∫–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –ª–µ–≥–∫–æ',
    '–ø—É—Å—Ç—å –º–æ—Ä—Å –±—É–¥–µ—Ç –∫–∏—Å–ª—ã–º, –Ω–æ –∂–∏–∑–Ω—å ‚Äî —Å–ª–∞–¥–∫–æ–π',
    '–∑–∞ –≥–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±–æ—è—Ç—Å—è –≥—Ä–æ–º–∫–æ –∑–µ–≤–∞—Ç—å',
    '–ø—É—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –≤–æ–≤—Ä–µ–º—è –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Å–∞–º',
    '–∑–∞ —Å–æ—Å–µ–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ—é—Ç –Ω–µ —Å–ª—ã—à–∞—Ç—å',
    '–ø—É—Å—Ç—å –≤—Å–µ –≤–∏–ª–∫–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –¥–æ–º–æ–π',
    '–∑–∞ —Ç–æ—Ç —Å–∞–º—ã–π –º–æ–º–µ–Ω—Ç: "–Ω—É –ª–∞–¥–Ω–æ, –æ—Å—Ç–∞—ë–º—Å—è"',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –≤—Å–ø–æ–º–Ω–∏—Ç –ø–∞—Ä–æ–ª—å –æ—Ç –≥—Ä—É—Å—Ç–∏',
    '–∑–∞ –¥–∏–≤–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –æ–ø–æ–∑–¥–∞–µ—Ç –Ω–∞ –º–µ–¥–ª—è–∫',
    '–∑–∞ —Ç–µ—Ö, –∫—Ç–æ –≤—Å–µ–≥–¥–∞ –≤–µ—Ä–∏—Ç: "–Ω—É –±—É–¥–µ—Ç –ª—É—á—à–µ"',
    '–ø—É—Å—Ç—å —á–∞–π –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—Ç—ã–≤–∞–µ—Ç —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏',
    '–∑–∞ –¥—É—Ä–∞—Ü–∫–∏–µ –∫—Ä—É–∂–∫–∏ —Å –Ω–∞–¥–ø–∏—Å—è–º–∏',
    '–ø—É—Å—Ç—å –ª–æ–∂–∫–∞ –Ω–µ —É–ø–∞–¥—ë—Ç –Ω–∞ –±–µ–ª–æ–µ',
    '–∑–∞ –ø–∞–º—è—Ç—å, –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç —Å–º–µ—à–Ω–æ–µ',
    '–ø—É—Å—Ç—å –≤—Å—ë –≤–∞–∂–Ω–æ–µ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –ª–∞–¥–æ–Ω–∏',
    '–∑–∞ –≥–ª–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ —É–ª—ã–±–∞—é—Ç—Å—è —Ä–∞–Ω—å—à–µ —Ä—Ç–∞',
    '–ø—É—Å—Ç—å —Ä–æ–∑–µ—Ç–∫–∏ –±—É–¥—É—Ç –±–ª–∏–∂–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è',
    '–∑–∞ —à–∞–º–ø–∞–Ω—Å–∫–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤–Ω–µ–∑–∞–ø–Ω–æ',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ —Å–ø—Ä—è—á–µ—Ç—Å—è –æ—Ç —Ñ–æ—Ç–æ–∞–ø–ø–∞—Ä–∞—Ç–∞',
    '–∑–∞ —Ç–µ—Ö, –∫—Ç–æ –≥—Ä–æ–º–∫–æ —Ö–ª–æ–ø–∞–µ—Ç –¥–≤–µ—Ä—å—é, –Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è',
    '–ø—É—Å—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –±—É–¥—É—Ç —É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ª—é–¥–µ–π',
    '–∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ—Å–ª–µ –¥–≤—É—Ö',
    '–ø—É—Å—Ç—å –∫—Ç–æ-—Ç–æ –≤—Å–µ–≥–¥–∞ —Å–∫–∞–∂–µ—Ç: "–Ω—É –∏ –ø—É—Å—Ç—å"',
    '–∑–∞ –¥–æ—Ä–æ–≥–∏ –¥–æ–º–æ–π –±–µ–∑ —è–º',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–±—É–¥–µ—Ç –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞–π—Ñ–∞—è',
    '–∑–∞ –æ–∫–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é',
    '–ø—É—Å—Ç—å —Ñ–æ—Ä–µ–ª—å –±—É–¥–µ—Ç –º—è–≥—á–µ –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞',
    '–∑–∞ —Ç–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—Ç—ã–¥–Ω–æ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —É—Ç—Ä–æ–º',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–Ω–µ—Å–µ—Ç –º—É—Å–æ—Ä –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å—ë —Å–∫–∞–∂–µ—Ç',
    '–∑–∞ —Å–º–µ—Ö –ø–æ–¥ –æ–¥–µ—è–ª–æ–º, –µ—â—ë —Ä–∞–∑',
    '–ø—É—Å—Ç—å –∫–æ—Ç –ø—Ä–∏–¥—ë—Ç –≤–æ–≤—Ä–µ–º—è',
    '–∑–∞ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –±–æ–∏—Ç—Å—è –±—ã—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–º',
    '–ø—É—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ',
    '–∑–∞ —Å–º–µ–ª–æ—Å—Ç—å –≤—ã–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç, –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞—à–Ω–æ',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ—Å–Ω—ë—Ç—Å—è –æ–¥–∏–Ω',
    '–∑–∞ –ø–µ—Ä—á–∞—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è',
    '–ø—É—Å—Ç—å –Ω–æ—Å–∫–∏ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –ø–∞—Ä–∞',
    '–∑–∞ –∫–æ—Ñ–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ª–∏–≤–∞—é—Ç —Å –º–æ–ª—á–∞–ª–∏–≤—ã–º —Å–æ–≥–ª–∞—Å–∏–µ–º',
    '–ø—É—Å—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏ –±—É–¥—É—Ç –¥–æ–ø–∏—Å–∞–Ω—ã',
    '–∑–∞ –æ–∫–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ—é—Ç —Ä–∞–∑ –≤ –≥–æ–¥ –∏ –Ω–∏—á–µ–≥–æ',
    '–ø—É—Å—Ç—å –Ω–µ –±—É–¥–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –æ–±–Ω–∏–º–∞—à–µ–∫',
    '–∑–∞ –ø–ª–µ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞—Ä—à–µ –≤—Å–µ—Ö –Ω–∞—Å',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–±—É–¥–µ—Ç –≤—ã–∫–ª—é—á–∏—Ç—å —É—Ç—é–≥',
    '–∑–∞ –≥–ª—É–ø—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –≤ —Ç–µ–ª–µ–≥–µ',
    '–ø—É—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –±—É–¥—É—Ç –∫–æ—Ä–æ—á–µ, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å',
    '–∑–∞ —Å–º–µ—Ö, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –Ω–∞—Å –±–ª–∏–∂–µ',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–±—É–¥–µ—Ç –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –ø–∞–∫–µ—Ç',
    '–∑–∞ –º–æ—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–ø–∞—Å–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä',
    '–ø—É—Å—Ç—å –≤—Å–µ –∫—Ä—É–∂–∫–∏ –±—É–¥—É—Ç —á–∏—Å—Ç—ã–º–∏ –≤–æ–≤—Ä–µ–º—è',
    '–∑–∞ "–Ω—É –¥–∞–≤–∞–π –µ—â—ë –ø–æ—Å–∏–¥–∏–º"',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ —Å–∫–∞–∂–µ—Ç: "–ø–æ—Ä–∞ —Ä–∞—Å—Ö–æ–¥–∏—Ç—å—Å—è"',
    '–∑–∞ –∫–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è –≤ —Å—É–º–∫–µ',
    '–ø—É—Å—Ç—å –ø–æ–≤–∞—Ä–∞ –±—É–¥—É—Ç —Å—á–∞—Å—Ç–ª–∏–≤—ã',
    '–∑–∞ –º—É–∑—ã–∫—É, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–π–¥—ë—Ç —Ç–µ–±—è —Å–∞–º–∞',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–ª—å—ë—Ç —à–∞–º–ø–∞–Ω—Å–∫–æ–µ –Ω–∞ –∫—Ä–æ—Å—Å–æ–≤–∫–∏',
    '–∑–∞ —Ñ–æ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–µ—à–Ω–µ–µ, —á–µ–º —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã',
    '–ø—É—Å—Ç—å –Ω–∏–∫—Ç–æ –Ω–µ —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è –≥—Ä–æ–º–∫–æ —Ö–ª–æ–ø–∞—Ç—å',
    '–∑–∞ –≥–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–±–µ—Ä—É—Ç –≤–∏–ª–∫–∏',
    '–ø—É—Å—Ç—å –¥–æ–∂–¥—å –±—É–¥–µ—Ç —Ç—ë–ø–ª—ã–º',
    '–∑–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –±–µ–∑ –ø–æ–≤–æ–¥–∞',
    '–ø—É—Å—Ç—å –≤—Å—ë —Ö–æ—Ä–æ—à–µ–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è',
    '–∑–∞ —Ç–æ, —á—Ç–æ –º—ã –≤—Å–µ –∑–¥–µ—Å—å',
    '–ø—É—Å—Ç—å –ª—é–±–æ–≤—å –±—É–¥–µ—Ç —Ç–∞–∫–æ–π, –∫–∞–∫–æ–π —Ö–æ—á–µ—Ç—Å—è',
  ];
  const [toast, setToast] = React.useState(() => TOASTS[Math.floor(Math.random()*TOASTS.length)]);
  const handleToast = () => {
    let next;
    do {
      next = TOASTS[Math.floor(Math.random()*TOASTS.length)];
    } while (next === toast && TOASTS.length > 1);
    setToast(next);
  };
  return (
    <div className="App">
      <div className="header">
        <div className="title">üé§ –≥–æ–≤–æ—Ä–∏ –∫—Ä–∞—Å–∏–≤–æ</div>
        <div className="subtitle">–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ‚Äî –ø–æ–ª—É—á–∏ —Ç–æ—Å—Ç</div>
      </div>
      <div className="event-card" style={{textAlign:'center', minHeight:120, display:'flex', flexDirection:'column', justifyContent:'center'}}>
        <div style={{fontSize:'1.25rem', marginBottom:24, minHeight:60, lineHeight:1.3}}>{toast}</div>
        <button className="main-btn" onClick={handleToast}>–¥–∞–π —Ç–æ—Å—Ç</button>
      </div>
      <button className="info-bottom-btn" onClick={() => window.history.back()}>‚Üê –ù–∞–∑–∞–¥</button>
    </div>
  );
}

function App() {
  return (
    <Router basename="/weddingfi">
      <Routes>
        <Route path="/" element={<MainScreen />} />
        <Route path="/info" element={<InfoScreen />} />
        <Route path="/quiz" element={<QuizScreen />} />
        <Route path="/alcometer" element={<AlcometerScreen />} />
        <Route path="/toast" element={<ToastScreen />} />
      </Routes>
    </Router>
  );
}

export default App;
